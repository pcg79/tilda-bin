#!/usr/bin/env ruby

## git-remote-branch: a simple script to ease the unnecessarily complex
## task of "publishing" a branch, i.e., taking a local branch, creating a
## reference to it on a remote repo, and setting up the local branch to
## track the remote one, all in one go. you can even delete that remote
## reference.
##
## Usage: git-pull-branch <branch> [repository]
##
## <branch> is the branch to publish, and
## [repository] defaults to "origin". The remote branch name will be the
## same as the local branch name. Don't make life unnecessarily complex
## for yourself.
##
## git-pull-branch Copyright 2008 Pat George <pat dot george at gmail dot com>. 
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You can find the GNU General Public License at:
##   http://www.gnu.org/licenses/

def exec cmd
  puts cmd
  system cmd or die
end

def die s=nil
  $stderr.puts s if s
  exit(-1)
end

die "Need at least one argument: the branch to (un)publish." if ARGV.empty?

branch = ARGV.shift.gsub(/refs\/heads\//, "")
remote = ARGV.shift || "origin"
local_ref = `git show-ref heads/#{branch}`
remote_ref = `git show-ref remotes/#{remote}/#{branch}`

die "Local branch #{branch} already exists!" unless local_ref.empty?
die "A remote branch #{branch} on #{remote} doesn't exist!" if remote_ref.empty?

exec "git checkout -b #{branch}"
exec "git config branch.#{branch}.remote #{remote}"
exec "git config branch.#{branch}.merge refs/heads/#{branch}"
exec "git pull"